" plugin configs

" required Vundle setup
filetype off
set runtimepath+=~/.vim/bundle/vundle
call vundle#begin()

" bundles
Plugin 'VundleVim/Vundle.vim'

Plugin 'mbbill/undotree'
map <Leader>u ;UndotreeToggle<CR>
let g:undotree_WindowLayout = 2
let g:undotree_SplitWidth = 35

Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-c>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'a'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_custom_ignore = 'node_modules\|bower_components\|DS_Store\|git\|hg\|svn\|build\|dist\|public'

" let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux

Plugin 'gcmt/taboo.vim'
let g:taboo_tab_format = '[%N:%f%m] '
let g:taboo_renamed_tab_format = '[%N:%l%m] '
nmap <Leader>th ;tabfirst<CR>
nmap <Leader>tl ;tablast<CR>
map <Leader>tr ;TabooRename 
map <Leader>to ;TabooOpen 

Plugin 'tpope/vim-commentary'
nmap <BS> gcc
vmap <BS> gc

Plugin 'terryma/vim-multiple-cursors'
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction

Plugin 'Lokaltog/vim-easymotion'
map <Leader>s <Plug>(easymotion-s2)
map <Leader>h <Plug>(easymotion-linebackward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>l <Plug>(easymotion-lineforward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_smartcase = 1

Plugin 'scrooloose/nerdtree'
let NERDTreeHijackNetrw=0

Plugin 'Shougo/neocomplete.vim'
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

Plugin 'Shougo/neosnippet'
Plugin 'LabiKyo/neosnippet-snippets'

" Plugin key-mappings.
imap <C-j>     <Plug>(neosnippet_expand_or_jump)
smap <C-j>     <Plug>(neosnippet_expand_or_jump)
xmap <C-j>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

Plugin 'jistr/vim-nerdtree-tabs'
nmap <Leader>z <plug>NERDTreeTabsToggle<CR>

Plugin 'scrooloose/syntastic'
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_signs = 1

let g:syntastic_javascript_checkers = ['eslint']

let g:syntastic_html_checkers = ['jslint']

let g:syntastic_objc_compiler = 'clang'
let g:syntastic_objc_check_header = 0

let g:syntastic_json_checkers = ['jsonlint']

nmap <Leader>e ;Errors<CR>
nmap <Leader>c ;SyntasticCheck<CR>

Plugin 'majutsushi/tagbar'
" this plugin require ctags installed
nmap <Leader>x ;TagbarToggle<CR>

" + CoffeeScript Tags
  Plugin 'lukaszkorecki/CoffeeTags'

" + Ruby Tabs
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

Plugin 'epmatsw/ag.vim'
let g:ag_autofold_results = 1
ca ag Ag

Plugin 'taiansu/nerdtree-ag'

Plugin 'pbrisbin/vim-mkdir'

Plugin 'vim-scripts/matchit.zip'

Plugin 'vim-scripts/ruby-matchit'

Plugin 'jiangmiao/auto-pairs'
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsShortcutBackInsert = ''
nmap <Leader>p ;call AutoPairsToggle()<CR>

Plugin 'tpope/vim-fugitive'
nmap <Leader>gs ;Gstatus<CR>
nmap <Leader>gd ;Gdiff<CR>
nmap <Leader>gc ;Gcommit<CR>
nmap <Leader>gb ;Gblame<CR>
nmap <Leader>gl ;!git l<CR>
nmap <Leader>gp ;Git push<CR>
nmap <Leader>gw ;Gwrite<CR>

Plugin 'mhinz/vim-signify'
let g:signify_vcs_list = [ 'git' ]
let g:signify_line_highlight = 0

" + style
Plugin 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Plugin 'altercation/vim-colors-solarized'

" Plugin 'nathanaelkane/vim-indent-guides'
" au VimEnter * IndentGuidesEnable

" Plugin 'bling/vim-airline'
" require patched powerline font installed
" set laststatus=2
" let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1

Plugin 'tpope/vim-vinegar'

" + syntax
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

Plugin 'tpope/vim-rails'

Plugin 'vim-ruby/vim-ruby'

Plugin 'slim-template/vim-slim'

Plugin 'wavded/vim-stylus'

Plugin 'digitaltoad/vim-jade'

Plugin 'jimmyhchan/dustjs.vim'

Plugin 'groenewege/vim-less'

Plugin 'gkz/vim-ls'

Plugin 'hail2u/vim-css3-syntax'

Plugin 'tpope/vim-cucumber'

Plugin 'tpope/vim-haml'

Plugin 'mustache/vim-mustache-handlebars'

Plugin 'kchmck/vim-coffee-script'

Plugin 'othree/html5.vim'

Plugin 'mxw/vim-jsx'

Plugin 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
let g:user_emmet_mode='a'
autocmd FileType html EmmetInstall

Plugin 'pangloss/vim-javascript'
let javascript_enable_domhtmlcss = 1

" Plugin 'othree/yajs.vim'
" let javascript_enable_domhtmlcss = 1

Plugin 'othree/javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'angularjs,react,flux,chai,backbone,underscore'

Plugin 'burnettk/vim-angular'

Plugin 'tpope/vim-surround'

call vundle#end()
